services:
  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${DBUSER}
      POSTGRES_PASSWORD: ${DBPASS}
      POSTGRES_DB: ${DBNAME}
    ports:
      - "${DBPORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DBUSER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  python-app:
    build: ./fkv-service
    ports:
      - "80:80"
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - DBNAME=${DBNAME}
      - DBPORT=${DBPORT}
      - DBUSER=${DBUSER}
      - DBPASS=${DBPASS}
      - DBHOST=postgres
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  ml-app:
    build:
      context: ./fkv-service-ml
      dockerfile: Dockerfile
    ports:
      - "85:85"
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    networks:
      - app-network

  notification-service:
    build: ./notification-service
    environment:
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network

  node-app:
    build:
      context: ./fkv-client
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./fkv-client:/app
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
